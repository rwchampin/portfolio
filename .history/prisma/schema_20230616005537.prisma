generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
}

model BlogPost {
  id                String   @id @default(cuid())
  title             String
  description       String
  main_content      String
  primary_excerpt   String?
  secondary_excerpt String?
  featured_image    String 
  published         Boolean  @default(false)
}

model ExperimentPost {
  id                String   @id @default(cuid())
  title             String
  description       String
  main_content      String
  code              String?
  published         Boolean  @default(false)
}

model PostType {
  id          String   @id @default(cuid())
  name        String   @unique
}

model PostContent {
  id        String   @id @default(cuid())
  contentType String
  contentId String
  post Post @relation(fields: [postId], references: [id])
  postId String
}

model Post {
  id          String   @id @default(cuid())
  type        PostType @relation(fields: [typeId], references: [id])
  typeId      String 
  published   Boolean  @default(false)
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  tags        Tag[]
  title       String
  subtitle    String? 
  content     PostContent?
}
